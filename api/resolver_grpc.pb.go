// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BerryPostResolverClient is the client API for BerryPostResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BerryPostResolverClient interface {
	ResolveOnce(ctx context.Context, in *ResolveOnceRequest, opts ...grpc.CallOption) (*ResolveOnceResponse, error)
}

type berryPostResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewBerryPostResolverClient(cc grpc.ClientConnInterface) BerryPostResolverClient {
	return &berryPostResolverClient{cc}
}

func (c *berryPostResolverClient) ResolveOnce(ctx context.Context, in *ResolveOnceRequest, opts ...grpc.CallOption) (*ResolveOnceResponse, error) {
	out := new(ResolveOnceResponse)
	err := c.cc.Invoke(ctx, "/berrypost.v1.BerryPostResolver/ResolveOnce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BerryPostResolverServer is the server API for BerryPostResolver service.
// All implementations must embed UnimplementedBerryPostResolverServer
// for forward compatibility
type BerryPostResolverServer interface {
	ResolveOnce(context.Context, *ResolveOnceRequest) (*ResolveOnceResponse, error)
	mustEmbedUnimplementedBerryPostResolverServer()
}

// UnimplementedBerryPostResolverServer must be embedded to have forward compatible implementations.
type UnimplementedBerryPostResolverServer struct {
}

func (UnimplementedBerryPostResolverServer) ResolveOnce(context.Context, *ResolveOnceRequest) (*ResolveOnceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveOnce not implemented")
}
func (UnimplementedBerryPostResolverServer) mustEmbedUnimplementedBerryPostResolverServer() {}

// UnsafeBerryPostResolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BerryPostResolverServer will
// result in compilation errors.
type UnsafeBerryPostResolverServer interface {
	mustEmbedUnimplementedBerryPostResolverServer()
}

func RegisterBerryPostResolverServer(s grpc.ServiceRegistrar, srv BerryPostResolverServer) {
	s.RegisterService(&BerryPostResolver_ServiceDesc, srv)
}

func _BerryPostResolver_ResolveOnce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveOnceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BerryPostResolverServer).ResolveOnce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berrypost.v1.BerryPostResolver/ResolveOnce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BerryPostResolverServer).ResolveOnce(ctx, req.(*ResolveOnceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BerryPostResolver_ServiceDesc is the grpc.ServiceDesc for BerryPostResolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BerryPostResolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "berrypost.v1.BerryPostResolver",
	HandlerType: (*BerryPostResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResolveOnce",
			Handler:    _BerryPostResolver_ResolveOnce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resolver.proto",
}
