// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BerryPostProtoStoreClient is the client API for BerryPostProtoStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BerryPostProtoStoreClient interface {
	GetProto(ctx context.Context, in *GetProtoRequest, opts ...grpc.CallOption) (*GetProtoResponse, error)
}

type berryPostProtoStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewBerryPostProtoStoreClient(cc grpc.ClientConnInterface) BerryPostProtoStoreClient {
	return &berryPostProtoStoreClient{cc}
}

func (c *berryPostProtoStoreClient) GetProto(ctx context.Context, in *GetProtoRequest, opts ...grpc.CallOption) (*GetProtoResponse, error) {
	out := new(GetProtoResponse)
	err := c.cc.Invoke(ctx, "/berrypost.v1.BerryPostProtoStore/GetProto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BerryPostProtoStoreServer is the server API for BerryPostProtoStore service.
// All implementations must embed UnimplementedBerryPostProtoStoreServer
// for forward compatibility
type BerryPostProtoStoreServer interface {
	GetProto(context.Context, *GetProtoRequest) (*GetProtoResponse, error)
	mustEmbedUnimplementedBerryPostProtoStoreServer()
}

// UnimplementedBerryPostProtoStoreServer must be embedded to have forward compatible implementations.
type UnimplementedBerryPostProtoStoreServer struct {
}

func (UnimplementedBerryPostProtoStoreServer) GetProto(context.Context, *GetProtoRequest) (*GetProtoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProto not implemented")
}
func (UnimplementedBerryPostProtoStoreServer) mustEmbedUnimplementedBerryPostProtoStoreServer() {}

// UnsafeBerryPostProtoStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BerryPostProtoStoreServer will
// result in compilation errors.
type UnsafeBerryPostProtoStoreServer interface {
	mustEmbedUnimplementedBerryPostProtoStoreServer()
}

func RegisterBerryPostProtoStoreServer(s grpc.ServiceRegistrar, srv BerryPostProtoStoreServer) {
	s.RegisterService(&BerryPostProtoStore_ServiceDesc, srv)
}

func _BerryPostProtoStore_GetProto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProtoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BerryPostProtoStoreServer).GetProto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/berrypost.v1.BerryPostProtoStore/GetProto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BerryPostProtoStoreServer).GetProto(ctx, req.(*GetProtoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BerryPostProtoStore_ServiceDesc is the grpc.ServiceDesc for BerryPostProtoStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BerryPostProtoStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "berrypost.v1.BerryPostProtoStore",
	HandlerType: (*BerryPostProtoStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProto",
			Handler:    _BerryPostProtoStore_GetProto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto_store.proto",
}
